// Generated by Dagger (https://dagger.dev).
package com.example.quizapp.ui.fragments;

import com.example.quizapp.ui.viewmodels.QuestionsViewModel;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class QuestionsFragment_MembersInjector implements MembersInjector<QuestionsFragment> {
  private final Provider<QuestionsViewModel.Factory> viewModelAssistedFactoryProvider;

  public QuestionsFragment_MembersInjector(
      Provider<QuestionsViewModel.Factory> viewModelAssistedFactoryProvider) {
    this.viewModelAssistedFactoryProvider = viewModelAssistedFactoryProvider;
  }

  public static MembersInjector<QuestionsFragment> create(
      Provider<QuestionsViewModel.Factory> viewModelAssistedFactoryProvider) {
    return new QuestionsFragment_MembersInjector(viewModelAssistedFactoryProvider);
  }

  @Override
  public void injectMembers(QuestionsFragment instance) {
    injectViewModelAssistedFactory(instance, viewModelAssistedFactoryProvider.get());
  }

  @InjectedFieldSignature("com.example.quizapp.ui.fragments.QuestionsFragment.viewModelAssistedFactory")
  public static void injectViewModelAssistedFactory(QuestionsFragment instance,
      QuestionsViewModel.Factory viewModelAssistedFactory) {
    instance.viewModelAssistedFactory = viewModelAssistedFactory;
  }
}
